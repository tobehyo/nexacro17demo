<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="Filter" classname="Filter" left="0" top="0" width="727" height="1050" titletext="필터" onload="Filter_onload">
    <Layouts>
      <Layout>
        <Static id="Static04" taborder="7" cssclass="sta_WF_box02" left="10" top="609" right="0" height="41"/>
        <Grid id="grdList" taborder="0" useinputpanel="false" left="10" top="206" right="0" cellsizingtype="col" selecttype="cell" height="343" binddataset="ds_List" autofittype="col" onheadclick="fn_comGridOnHeadClick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="60"/>
                <Column size="100"/>
                <Column size="100"/>
                <Column size="220"/>
                <Column size="120"/>
                <Column size="80"/>
              </Columns>
              <Rows>
                <Row size="31" band="head"/>
                <Row size="31"/>
              </Rows>
              <Band id="head">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" style="background: ;"/>
                <Cell col="1" style="background: ;" text="성명"/>
                <Cell col="2" style="background: ;" text="타입"/>
                <Cell col="3" style="background: ;" text="주소"/>
                <Cell col="4" style="background: ;" text="금액"/>
                <Cell col="5" style="background: ;" text="생성일"/>
              </Band>
              <Band id="body">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" text="bind:chk"/>
                <Cell col="1" text="bind:Column0"/>
                <Cell col="2" text="bind:Column1"/>
                <Cell col="3" style="align:left;" text="bind:Column2" textAlign="left"/>
                <Cell col="4" style="align:right;" text="bind:Column3" textAlign="right"/>
                <Cell col="5" displaytype="date" text="bind:Column4" calendardateformat="yyyy-MM-dd"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Static id="Static07" taborder="1" text="헤더 필터 경우 Grid Header Filter 입력란에 처리할 데이터를 입력 후 조건을 선택하여 Filter 결과를 확인할 수 있습니다.&#13;&#10;문자열 입력 필터의 경우 Filter를 처리할 각각의 데이터 문자열을 입력하여 Filter 결과를 확인할 수 있습니다.&#13;&#10;입력란에 데이터를 지웠을 경우 Filter 처리가 해제 됩니다.&#13;&#10;&#13;&#10;" wordwrap="char" cssclass="sta_WF_box03" left="10" top="50" right="0" height="96"/>
        <Static id="Static02" taborder="2" text="헤더 필터" cssclass="sta_WF_title02" left="10" top="156" width="431" height="50"/>
        <Static id="Static01" taborder="3" text="문자열입력 필터" cssclass="sta_WF_title02" left="10" top="559" width="431" height="50"/>
        <Grid id="grdList00" taborder="4" binddataset="ds_List02" useinputpanel="false" selecttype="cell" cellsizingtype="col" cellmovingtype="col" left="10" top="660" right="0" height="343" autofittype="col" onheadclick="fn_comGridOnHeadClick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="40"/>
                <Column size="80"/>
                <Column size="80"/>
                <Column size="200"/>
                <Column size="100"/>
                <Column size="80"/>
              </Columns>
              <Rows>
                <Row size="31" band="head"/>
                <Row size="31"/>
              </Rows>
              <Band id="head">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" style="background: ;"/>
                <Cell col="1" style="background: ;" text="성명"/>
                <Cell col="2" style="background: ;" text="타입"/>
                <Cell col="3" style="background: ;" text="주소"/>
                <Cell col="4" style="background: ;" text="금액"/>
                <Cell col="5" style="background: ;" text="생성일"/>
              </Band>
              <Band id="body">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" text="bind:chk"/>
                <Cell col="1" text="bind:Column0"/>
                <Cell col="2" text="bind:Column1"/>
                <Cell col="3" style="align:left;" text="bind:Column2" textAlign="left"/>
                <Cell col="4" style="align:right;" text="bind:Column3" textAlign="right"/>
                <Cell col="5" displaytype="date" text="bind:Column4" calendardateformat="yyyy-MM-dd"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Static id="Static03" taborder="5" text="성명" cssclass="sta_WF_condition01" left="25" top="618" width="80" height="24"/>
        <Edit id="edt_name" taborder="6" left="80" top="618" width="130" height="23" ontextchanged="fn_comEditOnTextChanged" oninput="fn_comEditOnTextChanged"/>
        <Static id="Static05" taborder="8" text="타입" cssclass="sta_WF_condition01" left="233" top="618" width="80" height="24"/>
        <Edit id="edt_type" taborder="9" ontextchanged="fn_comEditOnTextChanged" left="288" top="618" width="130" height="23" onchanged="fn_comEditOnTextChanged"/>
        <Static id="Static06" taborder="10" text="주소" cssclass="sta_WF_condition01" left="441" top="618" width="80" height="24"/>
        <Edit id="edt_addr" taborder="11" ontextchanged="fn_comEditOnTextChanged" left="496" top="618" width="130" height="23" onchanged="fn_comEditOnTextChanged"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_List" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="chk" type="STRING" size="256"/>
          <Column id="Column0" type="STRING" size="256"/>
          <Column id="Column1" type="STRING" size="256"/>
          <Column id="Column2" type="STRING" size="256"/>
          <Column id="Column3" type="BIGDECIMAL" size="256"/>
          <Column id="Column4" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="Column3">3000</Col>
            <Col id="Column4">20170627</Col>
            <Col id="Column0">이승환</Col>
            <Col id="Column2">인천시 서구 가좌동 118</Col>
            <Col id="Column1">조회</Col>
          </Row>
          <Row>
            <Col id="Column3">4000</Col>
            <Col id="Column4">20170627</Col>
            <Col id="Column0">이승한</Col>
            <Col id="Column2">경기도 시흥시 정왕동 104 (2가)</Col>
            <Col id="Column1">입력</Col>
          </Row>
          <Row>
            <Col id="Column3">50000</Col>
            <Col id="Column4">20170628</Col>
            <Col id="Column0">이철우</Col>
            <Col id="Column2">경기도 이천시 관고동 501-7</Col>
            <Col id="Column1">수정</Col>
          </Row>
          <Row>
            <Col id="Column3">51651</Col>
            <Col id="Column4">20170629</Col>
            <Col id="Column0">강순희</Col>
            <Col id="Column2">서울특별시 영등포구 여의도동 1</Col>
            <Col id="Column1">삭제</Col>
          </Row>
          <Row>
            <Col id="Column3">216548</Col>
            <Col id="Column4">20170630</Col>
            <Col id="Column0">배재현</Col>
            <Col id="Column2">서울특별시 강서구 화곡동 98-252</Col>
            <Col id="Column1">조회</Col>
          </Row>
          <Row>
            <Col id="Column3">216218</Col>
            <Col id="Column4">20170630</Col>
            <Col id="Column0">강공작</Col>
            <Col id="Column2">서울특별시 강동구 명일동 257</Col>
            <Col id="Column1">입력</Col>
          </Row>
          <Row>
            <Col id="Column3">954561</Col>
            <Col id="Column4">20170630</Col>
            <Col id="Column0">김명기</Col>
            <Col id="Column2">서울특별시 강서구 등촌동 631-6</Col>
            <Col id="Column1">수정</Col>
          </Row>
          <Row>
            <Col id="Column3">2121684</Col>
            <Col id="Column4">20170701</Col>
            <Col id="Column0">변길용</Col>
            <Col id="Column2">경기도 광명시 옥길동 370</Col>
            <Col id="Column1">삭제</Col>
          </Row>
          <Row>
            <Col id="Column3">6549845</Col>
            <Col id="Column4">20170702</Col>
            <Col id="Column0">설동옥</Col>
            <Col id="Column2">서울특별시 영등포구 신길동 116-15 지하</Col>
            <Col id="Column1">조회</Col>
          </Row>
          <Row>
            <Col id="Column3">65150</Col>
            <Col id="Column4">20170703</Col>
            <Col id="Column0">허승조</Col>
            <Col id="Column2">서울특별시 성북구 돈암동 636</Col>
            <Col id="Column1">입력</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_List02" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="chk" type="STRING" size="256"/>
          <Column id="Column0" type="STRING" size="256"/>
          <Column id="Column1" type="STRING" size="256"/>
          <Column id="Column2" type="STRING" size="256"/>
          <Column id="Column3" type="BIGDECIMAL" size="256"/>
          <Column id="Column4" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="Column3">3000</Col>
            <Col id="Column4">20170627</Col>
            <Col id="Column0">이승환</Col>
            <Col id="Column2">인천시 서구 가좌동 118</Col>
            <Col id="Column1">조회</Col>
          </Row>
          <Row>
            <Col id="Column3">3000</Col>
            <Col id="Column4">20170627</Col>
            <Col id="Column0">이승한</Col>
            <Col id="Column2">경기도 시흥시 정왕동 104 (2가)</Col>
            <Col id="Column1">입력</Col>
          </Row>
          <Row>
            <Col id="Column3">50000</Col>
            <Col id="Column4">20170628</Col>
            <Col id="Column0">이철우</Col>
            <Col id="Column2">경기도 이천시 관고동 501-7</Col>
            <Col id="Column1">수정</Col>
          </Row>
          <Row>
            <Col id="Column3">51651</Col>
            <Col id="Column4">20170629</Col>
            <Col id="Column0">강순희</Col>
            <Col id="Column2">서울특별시 영등포구 여의도동 1</Col>
            <Col id="Column1">삭제</Col>
          </Row>
          <Row>
            <Col id="Column3">216548</Col>
            <Col id="Column4">20170630</Col>
            <Col id="Column0">배재현</Col>
            <Col id="Column2">서울특별시 강서구 화곡동 98-252</Col>
            <Col id="Column1">조회</Col>
          </Row>
          <Row>
            <Col id="Column3">216218</Col>
            <Col id="Column4">20170630</Col>
            <Col id="Column0">강공작</Col>
            <Col id="Column2">서울특별시 강동구 명일동 257</Col>
            <Col id="Column1">입력</Col>
          </Row>
          <Row>
            <Col id="Column3">954561</Col>
            <Col id="Column4">20170630</Col>
            <Col id="Column0">김명기</Col>
            <Col id="Column2">서울특별시 강서구 등촌동 631-6</Col>
            <Col id="Column1">수정</Col>
          </Row>
          <Row>
            <Col id="Column3">2121684</Col>
            <Col id="Column4">20170701</Col>
            <Col id="Column0">변길용</Col>
            <Col id="Column2">경기도 광명시 옥길동 370</Col>
            <Col id="Column1">삭제</Col>
          </Row>
          <Row>
            <Col id="Column3">6549845</Col>
            <Col id="Column4">20170702</Col>
            <Col id="Column0">설동옥</Col>
            <Col id="Column2">서울특별시 영등포구 신길동 116-15 지하</Col>
            <Col id="Column1">조회</Col>
          </Row>
          <Row>
            <Col id="Column3">65150</Col>
            <Col id="Column4">20170703</Col>
            <Col id="Column0">허승조</Col>
            <Col id="Column2">서울특별시 성북구 돈암동 636</Col>
            <Col id="Column1">입력</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[/**
*  nexacro 17 demo
*  @MenuPath    grid > Functions
*  @FileName  Functions.xfdl 
*  @Creator  presales
*  @CreateDate  2019.09.25
*  @Desction    스크립트 표준 및 주석 표준 정의
************** 소스 수정 이력 ***********************************************
*  date            Modifier                Description
*******************************************************************************
*  2019.09.25      presales                  최초 생성 
*******************************************************************************
*/

/************************************************************************************************
 * FORM 변수 선언 영역
 ************************************************************************************************/
// Filter 가능 표시 이미지
this.FILTER_ENABLE_IMAGE_URL = "imagerc::grd_filter_combo.png";
this.FILTER_ENABLE_IMAGE_SIZE = [21, 20];

// Filter 적용 표시 이미지
this.FILTER_APPLY_IMAGE_URL = "imagerc::grd_filter_check.png";
this.FILTER_APPLY_IMAGE_SIZE = [21, 20];

// CheckBox Flag 값
this.sChk01 = "0";
this.sChk02 = "0";
	
/************************************************************************************************
 * FORM EVENT 영역(onload, onbeforeclose)
 ************************************************************************************************/
 this.Filter_onload = function(obj:Form, e:nexacro.LoadEventInfo)
{
	this.initGridHeadAppendFilter(this.grdList);
}

 /************************************************************************************************
 * CALLBACK 콜백 처리부분(Transaction, Popup)
 ************************************************************************************************/

 /************************************************************************************************
 * CRUD 및 TRANSACTION 서비스 호출 처리
 ************************************************************************************************/

/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/

/************************************************************************************************
 * Function Name: fnIsUndefined
 * Description  : value의 undefined 여부 반환.
 * Arguments    : @param {*} value 확인할 value.		
 * Return       : @return {boolean} undefined 여부.
*************************************************************************************************/
this.fnIsUndefined = function(value)
{
	return value === undefined;
};

/************************************************************************************************
 * Function Name: fnIndexOf
 * Description  : 지정된 항목이 처음 나오는 배열 위치를 반환한다. 
 * Arguments    : @param {array} array 검색 대상 Array.
		 		  @param {object} item 찾고자 하는 Item.
				  @param {number=} from 검색의 시작 위치 (default: 0).
				  @param {boolean=} strict true: 형변환 없이 비교('==='), false: 형변환 후 비교('==') (default: false).
 * Return       : @return {number} 검색된 배열 위치. 없다면 -1 리턴.
*************************************************************************************************/
this.fnIndexOf = function(array, item, from, strict)
{
	var len = array.length;
	
	if (from == null)
		from = 0;
		
	strict == !!strict;
	
	from = (from < 0) ? Math.ceil(from) : Math.floor(from);
	
	if (from < 0)
	{
		from += len;
	}
	
	if (strict)
	{
		for (; from < len; from++) 
		{
			if ( array[from] === item)
			{
				return from;
			}
		}
	}
	else
	{
		for (; from < len; from++) 
		{
			if ( array[from] == item)
			{
				return from;
			}
		}
	}
	
	return -1;
};

/************************************************************************************************
 * Function Name: fnGetBorderWidth
 * Description  : nexacro Component의 border width(px)를 반환한다.
 * Arguments    : @param {XComp} xComp nexacro Component
		 		  
 * Return       : @return {array.<number>} [ leftWdith, topWdith, rightWdith, bottomWdith ]
*************************************************************************************************/
this.fnGetBorderWidth = function(xComp)
{
	var border = xComp._getCurrentStyleBorder();
	var leftWidth = 0,topWidth = 0,rightWidth = 0,bottomWidth = 0;
	
	if (border)
	{
		leftWidth   = border.left.width;
		topWidth    = border.top.width;
		rightWidth  = border.right.width;
		bottomWidth = border.bottom.width;
		
		leftWidth   = nexacro.toNumber(leftWidth.replace("px",""), 0);
		topWidth    = nexacro.toNumber(topWidth.replace("px",""), 0);
		rightWidth  = nexacro.toNumber(rightWidth.replace("px",""), 0);
		bottomWidth = nexacro.toNumber(bottomWidth.replace("px",""), 0);
		
		return [leftWidth, topWidth, rightWidth, bottomWidth];
	}

	return [0, 0, 0, 0];
};
		 
/************************************************************************************************
 * Function Name: fnGetCurrentScrollBarSize
 * Description  : 스크롤바가 표시됐을 때에만 size를 반환한다.
 * Arguments    : @param {XComp} XComp nexacro Component
		 		  @param {string} type 스크롤바 종류(수평스크롤바:"horz", 수직스크롤바:"vert")
 * Return       : @return {number} 스크롤바 size(스크롤바가 없거나 표시되지 않을 때는 0).
*************************************************************************************************/
this.fnGetCurrentScrollBarSize = function(XComp, type)
{
	if(XComp instanceof nexacro.Div)
	{
		XComp = XComp.form;
	}
	var scrollBar = (type == "horz") ? XComp.hscrollbar : XComp.vscrollbar;
	
	return (scrollBar && scrollBar.visible ? (type == "horz" ? scrollBar.getOffsetHeight() : scrollBar.getOffsetWidth()) : 0);
};

/************************************************************************************************
 * Function Name: Filter_onload
 * Description  : Form onload
 * Arguments    :
 * Return       :
*************************************************************************************************/
this.fn_comGridOnHeadClick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	// CheckBox 전체선택/해제
	switch (obj.name)
	{
		case "grdList" :
			if (e.col == 0)
			{
				if (this.sChk01 == "0") {
					this.fn_BlockChk(obj);
					this.sChk01 = "1";
				} else {
					this.fn_BlockUnChk(obj);
					this.sChk01 = "0";
				}			
			}
			break;
			
		case "grdList00" :
			if (e.col == 0)
			{
				if (this.sChk02 == "0") {
					this.fn_BlockChk(obj);
					this.sChk02 = "1";
				} else {
					this.fn_BlockUnChk(obj);
					this.sChk02 = "0";
				}			
			}		
			break;
	}
};

/************************************************************************************************
 * Function Name: fn_comEditOnTextChanged
 * Description  : 문자열입력 필터 처리
 * Arguments    :
 * Return       :
*************************************************************************************************/
this.fn_comEditOnTextChanged = function(obj:nexacro.Edit,e:nexacro.InputEventInfo)
{
	switch (obj.name)
	{
		case "edt_name" :
			this.ds_List02.filter("String(Column0).indexOf('" + obj.text + "') >= 0");
			break;
			
		case "edt_type" :
			this.ds_List02.filter("String(Column1).indexOf('" + obj.text + "') >= 0");
			break;
			
		case "edt_addr" :
			this.ds_List02.filter("String(Column2).indexOf('" + obj.text + "') >= 0");
			break;
	}	
};

/************************************************************************************************
 * Function Name: initGridHeadAppendFilter
 * Description  : Grid Header Filer 기능 초기화
 * Arguments    : grid - Grid Object
 * Return       :
*************************************************************************************************/
this.initGridHeadAppendFilter = function(grid)
{
    // 필터영역(Div) 를 담아둘 속성 추가
    if (this.fnIsUndefined(grid.makeCompList)) {
        grid.makeCompList = [];
    }

    // 필터적용 정보를 담아둘 속성 추가
    if (this.fnIsUndefined(grid.filterItems)) {
        grid.filterItems = {};
    }
    
    this.showHeadAppendFilter(this.grdList);
}

/************************************************************************************************
 * Function Name: showHeadAppendFilter
 * Description  : Grid Header Append Filter 보이기
 * Arguments    : grid - Grid Object
 * Return       :
*************************************************************************************************/
this.showHeadAppendFilter = function(grid)
{
    var rowIdx = grid.appendContentsRow("head");

    // 추가된 head row index를 담아두자.    
    grid.appendHeadRowIndex = rowIdx;

    this.arrangeFilterComps(grid);
}

/************************************************************************************************
 * Function Name: arrangeFilterComps
 * Description  : Grid Header Append Filter 기능에 필요한 컴포넌트 생성 및 위치 조정
 * Arguments    : grid - Grid Object
 * Return       :
*************************************************************************************************/
this.arrangeFilterComps = function(grid)
{
    var form = grid.parent;
    var index = grid.appendHeadRowIndex;
    
	var cellCnt = grid.getCellCount("head");
	
	var rect, rects = [];
    var first = true;
	
    var bodyCellIndex, column, comp, name, type;
    var l, t, w, h, i;
    var col, band, pivotIndex;
	
	var list = grid.makeCompList;
    var seq = 0;
    
	var gridLeftPos = grid.getOffsetLeft();
    var gridTopPos = grid.getOffsetTop();
    var gridPos = [gridLeftPos, gridTopPos, gridLeftPos + grid.getOffsetWidth(), gridTopPos + grid.getOffsetBottom()];
    
    // 각 cell 영역에 필터 입력 영역 생성
    for (i = 0; i < cellCnt; i++)
    {
        if (grid.getCellProperty("head", i, "row") == index)
        {
            col = grid.getCellProperty("head", i, "col");
            band = grid.getFormatColProperty(col, "band");
            pivotIndex = this.gfnDecode(band, "left", -1, "right", -2, 0);
            rect = grid.getCellRect(-1, i, pivotIndex);
            bodyCellIndex = this.getBodyCellIndex(grid, i);
            column = this.getBindColumnNameByIndex(grid, bodyCellIndex);
            type = grid.getCellProperty("body", bodyCellIndex, "displaytype");

            if (this.fnIsUndefined(type)) type = "normal";

            name = grid.name + "_headAppendComp" + seq;
			
            var borderWidths = this.fnGetBorderWidth(grid);
			
            l = gridPos[0] + rect.left;
            t = gridPos[1] + rect.top + borderWidths[1];
            w = rect.width - 1;
            h = rect.height - 1;

            // 컴포넌트가 존재하지 않으면 추가
            if (this.fnIndexOf(list, name) < 0)
            {
                list.push(name);
                comp = new Div(name, l, t, w, h);
				
				//필터
                comp.set_border("0px none white");
                comp.form.set_scrollbartype("none");
				comp.form.set_scrolltype("none");
                comp.set_async(false);
                comp.set_visible(false);
                
                form.addChild(comp.name, comp);

                comp.set_url("grid::GridFilterDiv.xfdl");

                comp.show();
            }
            else
            {
                comp = form.components[name];
            }

            // Div에 참조값 지정
            comp.grid = grid;
            comp.headCellIndex = i;
            comp.bodyCellIndex = bodyCellIndex;
            comp.filterType = type;
            comp.filterColumn = column;

            var filterItems = grid.filterItems;
            var filterItem = filterItems[column];
            if (!this.gfnIsNull(filterItem))
            {
                comp.filterData = filterItem.filterData;
            }

            // 필터타입 지정
            comp.form.setFilterType();

            // 위치 조정
            if (l < gridPos[0])
            {
                l = gridPos[0];
            }

            if (l + grid.vscrollbar.getOffsetWidth() > gridPos[2])
            {
                comp.set_visible(false);
            }
            else
            {
                var scrollWidth = grid.vscrollbar.getOffsetWidth();
				
                if ((l + w) > gridPos[2] - scrollWidth)
                {
                    w = gridPos[2] - l;
                    
					if (grid.vscrollbar) {
                        w = w - scrollWidth - 1;
                    }
                }
				
                comp.move(l + 1, t + 1, w, h);
                comp.set_visible(true);
            }

            seq++;
        }
    }

    var div = form.components[list[0]];

    if (!this.gfnIsNull(div)) div.setFocus();
}

/************************************************************************************************
 * 필터 처리에 필요한 단위 기능 function
*************************************************************************************************/
/************************************************************************************************
 * Function Name: getCompXYFromGridHeadCellRight
 * Description  : 그리드 헤드 셀 우측영역에 위치할 컴포넌트의 좌표를 반환
 * Arguments    : grid          - Grid Object
                  headCellIndex - Grid Head Cell Index
                  comp          - 대상 컴포넌트
 * Return       : {array} x, y 좌표 (위치할 수 없을 경우 -1)
*************************************************************************************************/
this.getCompXYFromGridHeadCellRight = function(grid, headCellIndex, comp)
{
    var col = grid.getCellProperty("head", headCellIndex, "col");
    var band = grid.getFormatColProperty(col, "band");
    var pivotIndex = this.gfnDecode(band, "left", -1, "right", -2, 0);
    var cellRect = grid.getCellRect(-1, headCellIndex, pivotIndex);

    var scrollWidth = this.fnGetCurrentScrollBarSize(grid, "vert");
    var gridLeft = grid.getOffsetLeft();
    var gridTop = grid.getOffsetTop();
    var gridAvailRight = gridLeft + grid.getOffsetWidth() - scrollWidth;

    var x = y = -1;

    if (gridLeft + cellRect.left < gridAvailRight)
    {

        if (cellRect.left < gridLeft)
        {
            cellRect.left = 0;
        }

        if (gridLeft + cellRect.right > gridAvailRight)
        {
            cellRect.right = gridAvailRight - gridLeft;
        }

        x = gridLeft + cellRect.left + (cellRect.width - comp.getOffsetWidth());
        y = gridTop + cellRect.top + Math.round((cellRect.height - comp.getOffsetHeight()) / 2);

        if (x < gridLeft)
        {
            x = -1;
        }
        if (y < gridTop)
        {
            y = -1;
        }
    }

    return [x, y];
}

/************************************************************************************************
 * Function Name: executeFilter
 * Description  : Filter 실행
 * Arguments    : grid          - Grid Object
                  headCellIndex - Grid Head Cell Index
                  filterString  - 적용할 조건식
                  filterData    - filter 조건 데이터
 * Return       :
*************************************************************************************************/
this.executeFilter = function(grid, headCellIndex, filterString, filterData)
{
    var bodyCellIndex = this.getBodyCellIndex(grid, headCellIndex);
    
	var column = this.getBindColumnNameByIndex(grid, bodyCellIndex);
    var ds = grid.getBindDataset();
    
	var filterItems = grid.filterItems;
    var filterItem = filterItems[column];
    
	// 선택 컬럼명의 필터정보 확인 및 지정
    if (this.fnIsUndefined(filterItem))
    {
        filterItem = filterItems[column] = {
            filterData: filterData,
            filterString: filterString
        };
    }
    else
    {
        filterItem.filterData = filterData;
        filterItem.filterString = filterString;
    }

    // 필터정보에서 필터스트링 조합
    var resultString = "";
    var tempString = "";
	var p;
	
    for (p in filterItems)
    {

        if (!filterItems.hasOwnProperty(p)) return;

        filterItem = filterItems[p];
        tempString = filterItem.filterString;

        if (!this.gfnIsNull(tempString))
        {
            resultString += (this.gfnIsNull(resultString) ? "" : " && ") + tempString;
        }
    }

    // 필터 적용
    ds.filter(resultString);
}

/************************************************************************************************
 * Function Name: getBodyCellIndex
 * Description  : Header Cell에 Match되는 Body Cell 가져오기
 * Arguments    : grid          - Grid Object
                  headCellIndex - Grid Head Cell Index
 * Return       :
*************************************************************************************************/
this.getBodyCellIndex = function(grid, headCellIndex)
{
	// Max Head Row Index
	var maxHeadRow = 0;
	var i, j, z;
	
	for (i = 0, len = grid.getCellCount("head"); i < len; i++)
	{
		var row = grid.getCellProperty("head", i, "row");
		
		if (maxHeadRow < row) {
			maxHeadRow = row;
		}
	}
	
	// Max Body Row Index
	var maxBodyRow = 0;
	
	for (j = 0, len = grid.getCellCount("body"); j < len; j++)
	{
		var row = grid.getCellProperty("body", j, "row");
		
		if (maxBodyRow < row) {
			maxBodyRow = row;
		}
	}

	if (maxHeadRow == 0 && maxBodyRow == 0) {
		return headCellIndex;
	}

	// Body Row 가 1개 이상일 경우
	// Head의 row 가 Body의 row 보다 클 경우 차이 row 를 뺀 것을 대상으로 찾고
	// Body의 row 가 Head의 row 보다 크거나 같을 경우 row index가 같은 대상을 찾는다.            
	var cellIndex = -1;
	
	var sRow = -1;
	var nRow = parseInt(grid.getCellProperty("head", headCellIndex, "row"));
	
	var nCol     = parseInt(grid.getCellProperty("head", headCellIndex, "col"));
	var nColspan = parseInt(grid.getCellProperty("head", headCellIndex, "colspan"));

	if (maxHeadRow > maxBodyRow) {
		sRow = nRow - (maxHeadRow - maxBodyRow);
		sRow = (sRow < 0 ? 0 : sRow);
	} else {
		sRow = nRow;
	}

	var cRow, cCol, cColspan;
	
	for (z = 0, len = grid.getCellCount("body"); z < len; z++)
	{
		cRow     = parseInt(grid.getCellProperty("body", z, "row"));
		cCol     = parseInt(grid.getCellProperty("body", z, "col"));
		cColspan = parseInt(grid.getCellProperty("body", z, "colspan"));
		
		// 실제로 매칭되는 body cell 이 없지만 colspan으로 첫번째 항목을 찾을 경우..
		if (sRow == cRow && nCol == cCol && nColspan == cColspan) {
			cellIndex = z;
			break;
		}
	}
	
	return cellIndex;
}

/************************************************************************************************
 * Function Name: getBindColumnNameByIndex
 * Description  : Body Cell Index로 Binding 된 컬럼명 가져오기
 * Arguments    : grid  - Grid Object
                  index - Grid Body Cell Index
 * Return       :
*************************************************************************************************/
this.getBindColumnNameByIndex = function(grid, index)
{
    var text = "";
    var columnid = "";
    var subCell = grid.getCellProperty("body", index, "subcell");
   
	if (subCell > 0) {
        text = grid.getSubCellProperty("body", index, 0, "text");
    } else {
        text = grid.getCellProperty("body", index, "text");
    }

    if (!this.gfnIsNull(text))
    {
        if (text.search(/^BIND\(/) > -1) {
            columnid = text.replace(/^BIND\(/, "");
            columnid = columnid.substr(0, columnid.length - 1);
        } else if (text.search(/^bind:/) > -1) {
            columnid = text.replace(/^bind:/, "");
        }
    }

    return columnid;
}

this.fn_BlockChk = function (objGrid)
{
	var i;
	var objDs = eval("this." + objGrid.binddataset);

	for (i = 0; i <= objDs.rowcount; i++) 
	{
		objDs.setColumn(i, "chk", "1");
	}

	objGrid.setCellProperty("Head", 0, "text", "1");
};

this.fn_BlockUnChk = function (objGrid)
{
	var i;
	var objDs = eval("this." + objGrid.binddataset);

	for (var i = 0; i <= objDs.rowcount; i++) 
	{
		objDs.setColumn(i, "chk", 0);
	}

	objGrid.setCellProperty("Head", 0, "text", "0");
};


/************************************************************************************************
 * 각 COMPONENT 별 EVENT 영역
 ************************************************************************************************/]]></Script>
  </Form>
</FDL>
