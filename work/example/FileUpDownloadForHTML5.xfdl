<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="sampleFileUpDownload" width="964" height="726" titletext="file upload and download for HTML5" onload="form_onload">
    <Layouts>
      <Layout height="726" mobileorientation="landscape" width="964">
        <Static id="sta00" taborder="0" left="10" top="179" width="458" height="248" background="#f4f8fc" border="1px solid #bad3ec" borderRadius="10px"/>
        <Static id="sta01" taborder="1" left="10" top="468" width="458" height="248" background="#f4f8fc" border="1px solid #bad3ec" borderRadius="10px"/>
        <Grid id="grdUpload" taborder="7" left="27" top="227" width="424" height="169" borderRadius="5px" binddataset="dsUpload" autofittype="col" oncellclick="grdUpload_oncellclick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="80"/>
                <Column size="292"/>
                <Column size="80"/>
              </Columns>
              <Rows>
                <Row size="34"/>
                <Row size="34"/>
              </Rows>
              <Band id="body">
                <Cell rowspan="2" text="bind:fileimg" displaytype="imagecontrol"/>
                <Cell col="1" text="bind:filename"/>
                <Cell col="2" rowspan="2" text="bind:rmimg" displaytype="imagecontrol"/>
                <Cell row="1" col="1" text="expr:(prog &lt; 100)?((prog &lt; 0)?'Error!':prog + '%'):'완료'" displaytype="expr:(prog &lt; 100)?((prog &lt; 0)?'normal':'progressbarcontrol'):'normal'"/>
              </Band>
            </Format>
            <Format id="format00">
              <Columns>
                <Column size="48"/>
                <Column size="362"/>
                <Column size="48"/>
              </Columns>
              <Rows>
                <Row size="48"/>
              </Rows>
              <Band id="body">
                <Cell displaytype="imagecontrol" text="bind:fileimg"/>
                <Cell col="1" text="expr:comp.parent.parent.getFileNameWithSize(dataset, currow)"/>
                <Cell col="2" text="bind:rmimg" displaytype="imagecontrol"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btn00" taborder="4" left="184" top="191" width="90" height="25" background="#1abd9c" font="bold 10px &quot;antialias&quot;" color="#ffffff" icon="URL(&quot;imagerc::file_btn_AddFiles.png&quot;)" iconPosition="left" textPadding="0px 0px 0px 10px" text="Add Files" borderRadius="5px" onclick="btn00_onclick"/>
        <Button id="btn01" taborder="5" left="281" top="191" width="92" height="25" background="#eb707e" font="bold 10px &quot;antialias&quot;" color="#ffffff" icon="URL(&quot;imagerc::file_btn_DeleteAll.png&quot;)" iconPosition="left" textPadding="0px 0px 0px 10px" text="Delete All" borderRadius="5px" onclick="btn01_onclick"/>
        <Button id="btn02" taborder="6" left="378" top="191" width="70" height="25" background="#298ae1" font="bold 10px &quot;antialias&quot;" color="#ffffff" icon="URL(&quot;imagerc::file_btn_Save.png&quot;)" iconPosition="left" textPadding="0px 0px 0px 10px" text="Save" borderRadius="5px" onclick="btn02_onclick"/>
        <Static id="staHelpMessage" taborder="2" left="33" top="232" width="413" height="159" background="#ffffff" border="1px dashed #aac9e7" borderRadius="10px" text="마우스로 파일을 끌어오세요" color="#8e8e8e" font="14px/normal &quot;돋움&quot;" textAlign="center"/>
        <ImageViewer id="imgLoading" taborder="3" left="764" top="121" width="200" height="60" background="URL(&quot;imagerc::loading.gif&quot;)" visible="false"/>
        <Grid id="grdDownload" taborder="8" left="27" top="484" width="424" height="216" borderRadius="5px" binddataset="dsDownload" autofittype="col" oncelldblclick="grdDownload_oncelldblclick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="80"/>
                <Column size="292"/>
              </Columns>
              <Rows>
                <Row size="34"/>
                <Row size="34"/>
              </Rows>
              <Band id="body">
                <Cell rowspan="2" text="bind:fileimg" displaytype="imagecontrol"/>
                <Cell col="1" text="bind:filename"/>
                <Cell row="1" col="1" text="expr:(prog &lt; 100)?((prog &lt; 0)?'Error!':prog + '%'):'완료'" displaytype="expr:(prog &lt; 100)?((prog &lt; 0)?'normal':'progressbarcontrol'):'normal'"/>
              </Band>
            </Format>
            <Format id="format00">
              <Columns>
                <Column size="48"/>
                <Column size="362"/>
              </Columns>
              <Rows>
                <Row size="48"/>
              </Rows>
              <Band id="body">
                <Cell displaytype="imagecontrol" text="bind:fileimg"/>
                <Cell col="1" text="bind:filename"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Static id="Static00" taborder="9" text="file upload" left="10" top="147" width="138" height="28" cssclass="sta_WF_title02"/>
        <Static id="Static01" taborder="10" text="file download" left="10" top="436" width="138" height="28" font="bold 10pt &quot;맑은 고딕&quot;" cssclass="sta_WF_title02"/>
        <Static id="Static05" taborder="11" text="File Upload &amp; Download" cssclass="sta_WF_title01" left="10" top="15" width="640" height="24"/>
        <Static id="Static07" taborder="12" text="넥사크로는 파일 업로드, 다운로드 처리를 Windows 탐색기에서 원하는 파일을 Drag &amp; Drop 으로 추가하여 처리할 수 있습니다." cssclass="sta_WF_box03" left="10" top="50" right="0" height="71" wordWrap="char"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsDownload">
        <ColumnInfo>
          <Column id="fileid" type="STRING" size="256"/>
          <Column id="fileimg" type="STRING" size="256"/>
          <Column id="filename" type="STRING" size="256"/>
          <Column id="filesize" type="INT" size="256"/>
          <Column id="prog" type="INT" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsUpload">
        <ColumnInfo>
          <Column id="fileid" type="STRING" size="256"/>
          <Column id="fileimg" type="STRING" size="256"/>
          <Column id="filename" type="STRING" size="256"/>
          <Column id="filetype" type="STRING" size="256"/>
          <Column id="filesize" type="INT" size="256"/>
          <Column id="tranfilesize" type="INT" size="256"/>
          <Column id="prog" type="INT" size="256"/>
          <Column id="rmimg" type="STRING" size="256"/>
          <Column id="status" type="STRING" size="256"/>
          <Column id="filekey" type="STRING" size="256"/>
          <Column id="downcnt" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_temp">
        <ColumnInfo>
          <Column id="Column0" type="STRING" size="256"/>
          <Column id="Column1" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="Column0">1</Col>
            <Col id="Column1">2</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_input">
        <ColumnInfo>
          <Column id="name" type="STRING" size="256"/>
          <Column id="city" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="name">홍길동</Col>
            <Col id="city">seoul</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_output"/>
    </Objects>
    <Script type="xscript5.1"><![CDATA[/**
*  컨설팅 표준화 작업
*  @MenuPath    샘플 > 파일 업/다운로드
*  @FileName 	sampleFileUpDownloadForHTML5.xfdl 
*  @Creator 	consulting
*  @CreateDate 	2017.11.16
*  @Desction    스크립트 표준 및 주석 표준 정의
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  2017.11.16     	consulting 	                최초 생성 
*******************************************************************************
*/

/************************************************************************************************
 * FORM 변수 선언 영역
 ************************************************************************************************/
this.fileConfig = {};
	
//아이콘별 확장자 목록.
this.iconInfo = {
		file_icon_ZIP: ["zip","rar","7z"],
		file_icon_IMG: ["jpg", "jpeg", "gif", "png", "bmp"],
		file_icon_TXT: ["txt", "xml"],
		file_icon_DOC: ["doc", "docx"],
		file_icon_XLS: ["xls", "xlsx"],
		file_icon_PPT: ["ppt", "pptx"],
		file_icon_PDF: ["pdf"],
		file_icon_ETC: ["etc"] //위 확장자 목록에 일치하지 않을 경우. default icon
	};
	 
//확장자별 아이콘 정보	 
this.extToIcon = {}; 	 

//XHR2 진행처리용
this.tranFiles = {
	added : [],				// 업로드 파일 정보
	downloaded : [],		// 다운로드 파일 정보
	transferFileSize : 0,	// 현재까지 전송된 파일 크기
	transferFileIndex : 0,	// 현재 전송중인 파일 인덱스
	preFileSizeSum : 0		// 현재까지 전송된 파일크기 합계
};

this.extUp;
this.extDown;
this.transferType = "all";

/************************************************************************************************
 * FORM EVENT 영역(onload, onbeforeclose)
 ************************************************************************************************/
/**
 * @description 화면 onload시 처리내역(필수)
*/
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{	
	var sURL = nexacro.getApplication().webRootURL;
	
	this.fileConfig = {
		//host : this.gfnGetServerUrl(),
		host : sURL + "service/",
		uploadUrl : "file/saveFile.jsp?path=nexacro",
		downloadUrl : "file/downloadFile.jsp?path=nexacro&fileName=",
		deleteUrl : "file/deleteFile.jsp?path=nexacro",
		downImage : "imagerc::img_file.png",
		delImage : "imagerc::btn_del.png",
		allowTypes : ["jpg","jpeg","gif","png","bmp","txt","zip","7z","gzip","doc","docx","ppt","pptx","xls","xlsx","pdf"],
		maxCount : 10,
		maxSize : "200MB",
		maxTotalSize : "200MB"
	};	
	
	this.initFile();
};

/************************************************************************************************
 * CALLBACK 콜백 처리부분(Transaction, Popup)
 ************************************************************************************************/

/************************************************************************************************
 * CRUD 및 TRANSACTION 서비스 호출 처리
 ************************************************************************************************/

/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/**
 * @description 파일업/다운로드 관련 초기화
*/
this.initFile = function ()
{
	//확장자별 파일아이콘 설정.
	this.initExtToIcon();
	
	//==============================================
	//	파일 업로드 컴포넌트 생성 및 설정
	//==============================================
	var name = this.gfnGetUniqueId("extUpload_");
	var extUp = new nexacro.ExtFileUpload(name, this);
	this.addChild(extUp.name, extUp);
	this.extUp = extUp;
	
	this.extUp.set_multiselect(true);
	this.extUp.setResponseZone(this, this.staHelpMessage, this.grdUpload);//	먼지모르게씀
	
	// == Event 설정 ==
	//	파일 다이얼로그를 통해 파일을 선택했을 때 발생하는 이벤트입니다
	this.extUp.addEventHandler("onchange", this.extUpload_onchange, this);
	//통신 성공시에 발생하는 이벤트입니다
	this.extUp.addEventHandler("onsuccess", this.extUpload_onsuccess, this);
    //통신 오류 시 발생하는 이벤트입니다.
	this.extUp.addEventHandler("onerror", this.fileUpload_onerror, this);
	//HTML5 Only : XMLHttpRequest가 데이터를 보내거나 받는 동안 서버에서 정의된 간격으로 발생합니다.
	this.extUp.addEventHandler("onprogress", this.extUpload_onprogress, this);
	//HTML5 Only : XMLHttpRequest 통신시 readystate 속성 변경 event
	this.extUp.addEventHandler("onreadystatechange", this.extUpload_onreadystatechange, this);
	this.extUp.show();
	
	//==============================================
	//	파일 다운로드 컴포넌트 생성 및 설정
	//==============================================		
	var name = this.gfnGetUniqueId("extDownload_");
	var extDown = new nexacro.ExtFileDownload(name, this);
	this.addChild(extDown.name, extDown);
	this.extDown = extDown;

	// == Event 설정 ==
    //통신 성공시에 발생하는 이벤트입니다
    this.extDown.addEventHandler("onsuccess", this.extDownload_onsuccess, this);
    //통신 오류 시 발생하는 이벤트입니다.
	this.extDown.addEventHandler("onerror", this.extDownload_onerror, this);
	//HTML5 Only : XMLHttpRequest가 데이터를 보내거나 받는 동안 서버에서 정의된 간격으로 발생합니다.
	this.extDown.addEventHandler("onprogress", this.extDownload_onprogress, this);
	this.extDown.show();
	system.navigatorname

	//==============================================
	//	브라우저별 기능 표시
	//==============================================	
	//Drag and Drop 미지원 브라우저 확인.
	if(this.extUp.support.FileAPI == false) 
	{
		this.staHelpMessage.set_visible(false);
		
		this.staSupportDnd.set_color("red");
		this.staSupportDnd.set_text("• Drag and Drop 미지원");
	}
	
	//XHR2와 FileAPI 지원하지 않을 경우 그리드 format 변경. ex) file 전송량 표시용 progress bar
	if (!this.extUp.support.XHR2)
	{
		this.grdUpload.setFormat("format1");
		this.grdDownload.setFormat("format1");
		
		this.staSupportPgb.set_color("red");
		this.staSupportPgb.set_text("• ProgressBar 미지원");
	}	
	
	
	//Multiple File Selection.
	if (!this.extUp.support.MultipleInput)
	{
		this.staSupportMulti.set_color("red");
		this.staSupportMulti.set_text("• File 다중선택 미지원");
	}
};

/**
 * @description 확장자별 파일 아이콘 설정
*/
this.initExtToIcon = function ()
{
	var extToIcon = this.extToIcon;
	var iconInfo = this.iconInfo;
	var name, len;
	var i;
	
	for (name in iconInfo) 
	{
		len = iconInfo[name].length;
		
		for (i = 0; i < len; i++) 
		{
			extToIcon[iconInfo[name][i]] = name;
		}
	}
};

/**
 * @description 다운로드 파일의 확장자에 해당하는 이미지 설정.
*/
this.setDownloadFileIcon = function()
{
	var ds = this.dsDownload;
	var count = ds.rowcount;
	var fileName, icon;
	var i;
	
	for (i = 0; i < count; i++)
	{
		fileName = ds.getColumn(i, "filename");
		
		icon = this.getFileIcon(fileName); 
		ds.setColumn(i, "fileimg", icon);
	}
};

/**
 * @description 파일 확장자에 해당하는 이미지경로 반환.
 * @param {string} fileName file name
*/
this.getFileIcon = function(fileName)
{
	if (this.gfnIsNull(fileName)) return;
	
	fileName = fileName.toLowerCase();
	
	var ext = (/[.]/.exec(fileName)) ? /[^.]+$/.exec(fileName) : undefined;
	var icon = this.extToIcon[ext];
	
	if (icon == undefined) ext = "etc";

	return "imagerc::" + this.extToIcon[ext] + ".png";
};

/**
 * @description 파일 유효성검증
*/
this.validateFile = function(cond)
{
	var rtn = 1;
	
	this.gfnEach(cond, function(prop, val, object) 
	{
		var result = "";
		
		if (prop == "name")
		{
			var fileExt = val.slice(val.lastIndexOf(".")+1).toLowerCase();
			
			if (!this.gfnContains(this.fileConfig.allowTypes, fileExt)) {
				alert("'" + fileExt + "' 유형의 파일은 업로드가 불가능합니다. [" + val + "]");
				rtn = 0;
				return false;
			}
		}
		else if (prop == "length")
		{
			if (val >= this.fileConfig.maxCount) {
				alert(this.fileConfig.maxCount + "건 이상의 파일 업로드는 허용되지 않습니다.");
				rtn = -1;
				return false;
			}	
		}
		else if (prop == "size")
		{	
			if (!isNaN(val) && (val >= this.sizeToByte(this.fileConfig.maxSize))) {
				alert(this.fileConfig.maxSize + " 이상의 파일 업로드는 허용되지 않습니다.");
				rtn = 0;
				return false;
			}
		}
		else if (prop == "totalSize")
		{	
			if (!isNaN(val) && (val >= this.sizeToByte(this.fileConfig.maxTotalSize))) {
				alert(this.fileConfig.maxTotalSize + " 이상의 파일 업로드는 허용되지 않습니다.");
				rtn = -1;
				return false;
			}
		}
	}, this);
	
	return rtn;
};

/**
 * @description size를 byte로 변환처리한다.
*/ 
this.sizeToByte = function(fileSize) 
{
	var unit = fileSize.match(/[^\d]+/g),
		size = fileSize.match(/\d+/);

	unit = unit ? unit[0].toLowerCase() : "";
	size = size ? size[0] : fileSize;
	
	if (unit == "mb")  {
		return size * 1024 * 1024;
	} else if (unit == "gb") {
		return size * 1024 * 1024 * 1024;
	} else if (unit == "tb") {
		return size * 1024 * 1024 * 1024 * 1024;
	} else if (unit == "") {
		return size;
	} else {
		return fileSize;
	}
};

/**
 * @description 파일업로드수행
*/ 
this.uploadFiles = function ()
{
	var i, len, rowtype, 
		type, fileid, addFileLen,
		ds_files = this.dsUpload;
		
	var extUp = this.extUp;	
	addFileLen = extUp.getAddedFileLength() || 0;
	
	if (addFileLen > 0)
	{
		if (!extUp.support.XHR2 || !extUp.support.FileAPI)
		{
			if (!this.imgLoading.visible) {
				var topform = this.gfnGetTopLevelForm(this);
				var l = Math.round((topform.getOffsetWidth() - this.imgLoading.getOffsetWidth())/2);
				var t = Math.round((topform.getOffsetHeight() - this.imgLoading.getOffsetHeight())/2);
				
				this.imgLoading.move(l, t, this.imgLoading.getOffsetWidth(), this.imgLoading.getOffsetHeight());
				this.imgLoading.set_visible(true);
			}
		}
		
		this.initProgressbar("upload");
		
		var url = this.fileConfig.host + this.fileConfig.uploadUrl;
		
		/*
		런타임에서는 url parameter 설정만 가능!
		
		HTML5는 아래 내용 참고
			//  upload files
			//  @param {=string} path upload url 정보. default는 상단의 extUp.set_uploadurl()에서 설정한 정보.
			//  @param {string} inDatasetsParam input dataset 정보
			//  @param {string} outDatasetsParam output dataset 정보
			//  @param {string} transferType 전송유형.(all: 대상파일을 한번에 전송(defalut), each: 개별 전송)
			//  @param {number} datatype data 전송방식. 0:XML, 1:Binary(Runtime only), 2:SSV		
			
			ds_download에 output dataset 결과는 extUpload_onsuccess 이벤트의 e.datasets에서 수신한다.
		*/
		
		
		//[전체전송]
		var rtn = this.extUp.upload(url, "ds_input=dsUpload ds_temp=ds_temp","ds_output=ds_output", this.transferType, 0);		
		//[개별전송]
		//this.transferType = "all";
		//extUp.upload(url, "ds_input=ds_input","", this.transferType, 0);
	}
};

/**
 * @description 파일 다운로드 수행
*/ 
this.downloadFile = function (row)
{
	if (this.gfnIsNull(row) || row < 0) {
		return;
	}
	
	var dsDownload = this.dsDownload;
	var	fileId,
		fileName,
		fileSize = 0,
		fileInfo,
		downloadUrl;
		
	var tranFiles = this.tranFiles;
	tranFiles.downloaded = [];
	
	//progressbar 초기화
	dsDownload.setColumn(row, "prog", 0);
	
	fileId = dsDownload.getColumn(row, "fileid");
	fileName = dsDownload.getColumn(row, "filename");
	fileSize = dsDownload.getColumn(row, "filesize");
	fileInfo = {"id": fileId, "name": fileName, "size": fileSize, "row": row};
	
	tranFiles.downloaded.push(fileInfo);
		
	var downloadUrl = this.fileConfig.host + this.fileConfig.downloadUrl;
	var encodeFileName = escape(encodeURIComponent(fileName));
	//download file
	//@param {=string} url 다운로드 fullPath url
	//@param {string} filename 파일저장시 적용할 file name.(지원가능한 브라우저만 적용됨. 런타임 미지원)
	//@return {boolean} 다운로드 성공여부
	this.extDown.download(downloadUrl + encodeFileName, fileName);	
};

/**
 * @description 진행바 초기화
*/  
this.initProgressbar = function(type)
{	
	if (type == "upload") {
		this.tranFiles.preFileSizeSum = 0;
		this.tranFiles.transferFileIndex = 0;
	}
};

/**
 * @description 데이터셋 업데이트 여부 확인
*/
this.isUpdateDataset = function (ds)
{
	if (this.gfnIsNull(ds)) {
		return false;
	}
	
	if (ds.getRowCount() < 1) return false;
	
	if (ds.getDeletedRowCount() > 0) {
		return true;
	}
	
	if (ds.findRowExpr("(this.getRowType(rowidx)==Dataset.ROWTYPE_UPDATE)||(this.getRowType(rowidx)==Dataset.ROWTYPE_INSERT)") > -1) {
		return true;
	}
	
	return false;
};


/**
 * @descriptio 파일 삭제
 * @param {number} row 삭제대상 row
*/
this.removeFile = function(row)
{
	this.grdUpload.set_enableredraw(false);
	
	if (this.gfnIsNull(row) || row < 0) {
		return;
	}
	
	var dsFiles = this.dsUpload;
	
	//해당 row의 rowtype이 normal이면 서버에서 삭제로직 추가.
	//업로드가 성공한 후에는 ExtFileUpload에 존재하는 파일 정보가 사라진 상태.
	if (dsFiles.getRowType(row) == 2) //수정된 상태
	{
		var fileId = dsFiles.getColumn(row, "fileid");
		
		//ExtFileUpDownload에서 내부적으로 가지고 있는 file정보 삭제.
		this.extUp.removeFile(fileId);		
		dsFiles.deleteRow(row);
	}
	else
	{
		dsFiles.deleteRow(row);
		//업로드된 파일은 서버에서 삭제하기 위한 별도처리 필요.
		alert("업로드된 파일을 서버에서 삭제하기 위한 별도처리 필요.");
	}
	
	this.grdUpload.set_enableredraw(true); 
};

/**
 * @description 트랜스파일인포 초기화
*/  
this.resetTranFilesInfo = function()
{
	var downFiles = this.tranFiles.downloaded;
	
	this.gfnRemoveAt(downFiles, 0);		// 다운 파일 삭제
	this.tranFiles.downloaded = [];	
};

/************************************************************************************************
 * 각 COMPONENT 별 EVENT 영역
 ************************************************************************************************/
/**
 * @description 파일추가버튼이벤트
*/ 
this.btn00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.extUp.addFiles();
	
	if (this.staHelpMessage.visible) this.staHelpMessage.set_visible(false);	
};

/**
 * @description 전체삭제버튼이벤트
*/
this.btn01_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.grdUpload.set_enableredraw(false);
	this.extUp.removeAll();	
	this.dsUpload.clearData();
	this.grdUpload.set_enableredraw(true);
};

/**
 * @description 저장버튼이벤트
*/ 
this.btn02_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (!this.isUpdateDataset(this.dsUpload)) {
		alert("변경된 내역이 없습니다");
	} else {
		this.uploadFiles();
	}
};

/**
 * @description 개별삭제이벤트
*/ 
this.grdUpload_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	var rmCellIdx = 2;
	
	if (e.col == rmCellIdx) {
		this.removeFile(e.row);
	}
};

/**
 * @description 그리드 다운로드 더블클릭시 다운로드 실행
*/ 
this.grdDownload_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	this.downloadFile(e.row);
};

//=======================================================================================================================================
//              ExtFileUpload Event 
//=======================================================================================================================================
/**
 * @description 파일업로드 컴포넌트 체인지 이벤트
*/
this.extUpload_onchange = function(obj, e)
{
	var ds = this.dsUpload;
	var index = e.index;
 	var fileList = e.files;
 	var fileCount = fileList.length;
 	var fileSupport = (this.extUp.support.XHR2 && this.extUp.support.FileAPI);
	var i;
	
	for (i = 0; i < fileCount; i++)
	{
		var file = fileList[i];
		var fileId   = file.id;
		var fileName = file.name;
        var fileSize = file.size;
        var fileType = file.type;
        var fileFullpath = file.fullpath; 	//RUMTIME만 제공됨(HTML5는 빈문자열 반환). 2016.02.02
		var dsCount = ds.getRowCount();
		var cond;
		
		if (fileSupport) {
			var totalSize = ds.getSum("filesize") + fileSize;
			cond = {"name" : fileName, "length" : dsCount, "size" : fileSize, "totalSize" : totalSize};
		} else {
			cond = {"name" : fileName, "length" : dsCount};
		}
		
		var valid = this.validateFile(cond);
		
		//파일 유형 에러
		if (valid == 0) {
			this.extUp.removeFile(fileId);
			return;
		} else if (valid == -1) { //최대 파일첨부가능 건수 또는 size 에러.
			this.extUp.removeFile(fileId);
			return;
		}
		
		var findRow = ds.findRow("filename", fileName);

		if (findRow > -1) {
			alert("Duplicate name exists." + fileName);
			this.extUp.removeFile(fileId);
			return;			
		}
		
		// 업로드 파일 정보 데이타 구성
		var addidx = ds.addRow();
		var downImage = this.getFileIcon(fileName); 
		
		ds.setColumn(addidx, "fileimg", downImage);
		ds.setColumn(addidx, "fileid", fileId);
		ds.setColumn(addidx, "filename", fileName);
		
		if (fileSize > 0) {
			ds.setColumn(addidx, "filesize", fileSize);
		}

		ds.setColumn(addidx, "filetype", fileType);
		ds.setColumn(addidx, "prog", 0);
		ds.setColumn(addidx, "rmimg", this.fileConfig.delImage);		
	}
};

/**
 * @description 파일업로드 성공!
*/
this.extUpload_onsuccess = function(obj, e)
{
	//e.fildId는 개별전송("each")시 수신.	
	if (this.imgLoading.visible) {
		this.imgLoading.set_visible(false);
	}
	
	this.dsUpload.applyChange();
	
	if (e.datasets)
	{
		var outputDatasets = e.datasets;
		if (outputDatasets.length == 0) return;
		
		var outDs = outputDatasets[0];
		var ds = this.dsDownload;
		
		//개별전송 처리로직
		if (this.transferType == "each") 
		{
			if (this.extUp.support.XHR2) 
			{
				var row = ds.addRow();
				ds.copyRow(row, outDs, 0);
				
				//개별파일 전송시. "each"
				var fileId = e.fileId;
				if (fileId){
					var ds = this.dsUpload;
					var row = ds.findRow("filename", fileId);
					//trace("### [개별전송] extUpload_onsuccess :" +" e.fileId=" + e.fileId);
					ds.setColumn(row, "prog", 100);
				}				
			} 
			else 
			{
				ds.copyData(outDs);
			}
		} 
		else 
		{
			ds.copyData(outDs);
		}
	}
	
	this.setDownloadFileIcon();	
};

/**
 * @description [HTML5 Only] XMLHttpRequest 통신시 readystate 속성 변경 event
 * @param {ExtFileUpload} obj ExtFileUpload
 * @param {ExtFileReadystateChangEventInfo} e ExtFileReadystateChangEventInfo 
*/ 
this.extUpload_onreadystatechange = function(obj, e)
{
	if (e.readyState == 4)
	{
		if (e.status != 200) 
		{
			//trace("extUpload_onreadystatechange > Fail request!!");
			//TODO
			//에러 발생에 따른 UI 처리
			
			var ds = this.dsUpload;
			var count = ds.rowcount;
			var i;
			
			for (i = 0; i < count; i++)
			{
				ds.setColumn(i, "prog", -1);
			}
			
		} 
		else if (e.status == 200) 
		{
		}
	}
};

/**
 * @description [HTML5 Only] XMLHttpRequest가 데이터를 보내거나 받는 동안 서버에서 정의된 간격으로 발생합니다.
 * file upload & download 진행시 progress bar 처리용
 * @param {ExtFileUpload} obj ExtFileUpload
 * @param {ExtFileProgress} e ExtFileProgress 
*/ 
this.extUpload_onprogress = function(obj,e)
{
	var addedFile = obj.getAddedFile(),
		addedFileLength = addedFile.length || 0;
	
	if (e.lengthComputable && (addedFileLength > 0))
	{
		//개별파일 전송시. "each"
		var fileId = e.fileId;
		if (fileId)
		{
			var currentFileSize = e.loaded; // 현재까지 전송된 전체 사이즈
			var totalFileSize = e.total;   // 전체 사이즈
					
			var ds = this.dsUpload;
			var row = ds.findRow("filename", fileId);
			var transferFileRate = Math.floor((currentFileSize / totalFileSize) * 100);

			ds.setColumn(row, "prog", transferFileRate);
			ds.setColumn(row, "filesize", totalFileSize);
			ds.setColumn(row, "tranfilesize", currentFileSize);					
		
			return;
		}
		
		var transferFileSize,			// 파일 전송 사이즈
			transferFileRate,			// 파일 전송 진행율
			transferFile,				// 파일
			currentFileId,				// 파일 ID
			currentFileSize,			// 파일 크기
			currentFileName,			// 파일명
			ds_files = this.dsUpload,
			dsRow = -1;

		var tranFiles = this.tranFiles;
		// 현재까지 전송된 전체 사이즈
		tranFiles.transferFileSize = e.loaded;
		
		// 현재까지 전송된 크기가 이전파일 크기 합계보다 크면 진행바 상태 표시를 반복 수행
		while ((tranFiles.transferFileSize > tranFiles.preFileSizeSum) && (tranFiles.transferFileIndex < addedFileLength))
		{
			currentFileId = addedFile[tranFiles.transferFileIndex].id;
			dsRow = ds_files.findRow("fileid", currentFileId);
			
			transferFile = addedFile[tranFiles.transferFileIndex].file;
			currentFileSize = transferFile.size;
			currentFileName = transferFile.name;
			
			ds_files.setColumn(dsRow, "filesize", currentFileSize);
		
			transferFileSize = tranFiles.transferFileSize - tranFiles.preFileSizeSum;
			transferFileRate = Math.floor((transferFileSize / currentFileSize) * 100);
			
			// 현재 파일 전송이 완료되지 않은 경우는 다음 onStatus 이벤트 호출 대기
			if (transferFileRate < 100) {
				ds_files.setColumn(dsRow, "prog", transferFileRate);
				ds_files.setColumn(dsRow, "tranfilesize", transferFileSize);
				break;
			}
			
			// 현재 파일 전송 완료 또는 초과하는 경우는 현재 전송파일 완료 진행 처리후 while 반복문 로직 수행
			if (transferFileRate >= 100) 
			{
				transferFileSize = currentFileSize;	// 현재 파일 전송 사이즈
				transferFileRate = 100;	// 현재 파일 전송 진행율
				
				ds_files.setColumn(dsRow, "prog", transferFileRate);
				ds_files.setColumn(dsRow, "filesize", currentFileSize);
				ds_files.setColumn(dsRow, "tranfilesize", transferFileSize);
				
				// 다음 전송 파일 정보 설정
				tranFiles.preFileSizeSum += currentFileSize;	// 이전 파일 사이즈 합계
				tranFiles.transferFileIndex++;
				
				if (tranFiles.transferFileIndex >= addedFileLength) {
					break;
				}
			}
		}
	}
};

//=======================================================================================================================================
//              ExtFileDownload Event 
//=======================================================================================================================================
/**
 * @description 통신 오류 시 발생하는 이벤트입니다
*/ 
this.extDownload_onerror = function(obj, e)
{
  //런타임에서 e.errortype; <-- 원하는 type이 아닌 error object 가 전송됨.
	//trace("An error occurred: extDownload_onerror index=" + e.index  + ", errortype=" + e.errortype   + "\n, statuscode=" + e.statuscode + ", requesturi=" + e.requesturi);
	this.resetTranFilesInfo();
	
	if (this.imgLoading.visible) {
		this.imgLoading.set_visible(false);
	}	
};

/**
 * @description 다운로드 성공시에 발생하는 이벤트입니다
*/  
this.extDownload_onsuccess = function(obj, e)
{
	//trace("	 ★ extFileDownload_onsuccess url=" + e.url);
	
	this.resetTranFilesInfo();

	if (this.imgLoading.visible) {
		this.imgLoading.set_visible(false);
	}
	
	if (!this.gfnIsNull(e.url)) {
		alert("Successfully downloaded.");
	} else {
		alert("다운로드 실패");
	}
};

/**
 * @description [HTML5 Only] XMLHttpRequest가 데이터를 보내거나 받는 동안 서버에서 정의된 간격으로 발생합니다.
 * file upload & download 진행시 progress bar 처리용
 * @param {ExtFileUpload} obj ExtFileUpload
 * @param {ExtFileProgress} e ExtFileProgress
*/   
this.extDownload_onprogress = function(obj,e)
{
	if (e.lengthComputable)
	{
		var status,									 // 파일 전송 진행율
			currentFileSize,						 // 파일 크기
			transferCurrentFileSize,				 // 파일 전송 사이즈
			downFiles = this.tranFiles.downloaded,	 // 다운로드 대상 파일 목록
			currentRow = -1,
			dsDownload = this.dsDownload;
			
		status = Math.floor((e.loaded / e.total) * 100);
		
		currentFileSize = downFiles[0].size;
		currentRow = downFiles[0].row;
		
		transferCurrentFileSize = Math.floor(currentFileSize * (status / 100));
		dsDownload.setColumn(currentRow, "prog", status);
		dsDownload.setColumn(currentRow, "filesize", currentFileSize);
		dsDownload.setColumn(currentRow, "tranfilesize", transferCurrentFileSize);
	}
};]]></Script>
  </Form>
</FDL>
