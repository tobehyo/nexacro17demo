<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="Tab" width="1024" height="33" scrolltype="none" background="#fafafa">
    <Layouts>
      <Layout height="33" mobileorientation="landscape" width="1024">
        <Div id="divButtonList" taborder="0" left="5" top="2" height="49" right="174" maxwidth="" formscrollbartype="fixed none" onhscroll="divButtonList_onhscroll" onsize="divButtonList_onsize" formscrolltype="horizontal" text="">
          <Layouts>
            <Layout/>
          </Layouts>
        </Div>
        <Button id="btnMaximize" taborder="1" top="0" width="19" height="33" enable="true" right="93" onclick="btnMaximize_onclick" cssclass="btn_MDI_ScnBg, btn_MDI_ScnFull" tooltiptext="Maximize"/>
        <Button id="btnCascade" taborder="2" top="0" width="19" height="33" cssclass="btn_MDI_ScnBg, btn_MDI_ScnWin" enable="true" right="71" onclick="btnArrange_onclick" text="" tooltiptext="Cascade"/>
        <Button id="btnHorizontal" taborder="3" top="0" width="18" height="33" cssclass="btn_MDI_ScnBg, btn_MDI_ScnVDiv" enable="true" right="49" onclick="btnArrange_onclick" tooltiptext="Horizontal"/>
        <Button id="btnVertical" taborder="4" top="0" width="17" height="33" cssclass="btn_MDI_ScnBg, btn_MDI_ScnHDiv" enable="true" right="27" onclick="btnArrange_onclick" tooltiptext="Vertical"/>
        <Button id="btnCloseAll" taborder="5" top="0" width="17" height="33" cssclass="btn_MDI_ScnBg, btn_MDI_ScnClose" enable="true" right="5" onclick="btnCloseAll_onclick" tooltiptext="Close All"/>
        <Button id="btnMdiPrev" taborder="6" top="0" width="19" height="33" cssclass="btn_MDI_LeftTabCha" right="144" onclick="divButtonList_btnMdiPrev_onclick" enable="false"/>
        <Button id="btnMdiNext" taborder="7" top="0" width="19" height="33" cssclass="btn_MDI_RightTabCha" right="121" onclick="divButtonList_btnMdiNext_onclick" enable="false"/>
        <Static id="Static00" taborder="8" top="13" width="1" height="6" background="#bec0c2" right="141"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[/**
*  nexacro 17 demo
*  @MenuPath    Frame > Tab
*  @FileName  Tab.xfdl 
*  @Creator  presales
*  @CreateDate  2019.09.23
*  @Desction    Define script standards and annotation standards
************** Source modification history  ***********************************************
*  date            Modifier                Description
*******************************************************************************
*  2019.09.23      presales                  Initial creation 
*******************************************************************************
*/

/************************************************************************************************
 * FORM Variable declaration area
 ************************************************************************************************/
this.fvLeft = 0; //Tab position
this.fvTabButtonSize = 200;

/************************************************************************************************
 * FORM EVENT area(onload, onbeforeclose)
 ************************************************************************************************/
/**
 *Processing on screen onload (required)
 *@param {Form object} Form
 *@param {nexacro event} LoadEventInfo onload
 *@returns None.
*/
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
};

/************************************************************************************************
 * CALLBACK processing part(Transaction, Popup)
 ************************************************************************************************/
/************************************************************************************************
 * CRUD and TRANSACTION service call processing
 ************************************************************************************************/

/************************************************************************************************
 * User FUNCTION area
 ************************************************************************************************/
/**
* fnOpenTabMenu: Called from gfnOpenMenu function of CommFrame.js. Controls MDI of TopFrame
* @return : N/A
*/
this.fnOpenTabMenu = function(menuId, menuNm)
{
	this.fnInitTab();
	this.fnCreateTab(menuId, menuNm);
}


/**
* fnInitTab: Change cssclass(btn_MDI_Tab) of all tab buttons
* @return : N/A
*/
this.fnInitTab = function()
{
	var objDiv;
	for(var i = 0; i < this.divButtonList.form.components.length ; i++)
	{
		objDiv = this.divButtonList.form.components[i];

		if(String(objDiv.name).indexOf("div")>-1)
		{
			objDiv.form.btnTab.set_cssclass("btn_MDI_Tab");
		}
	}
}

/**
* fnCreateTab: Dynamically draws the tab when the menu is opened.
* @param {String} menuId	-	Menu ID
* @param {String} menuNm	-	menu name
* @return: {object} Tab button created Div
* @example:
*/
this.fnCreateTab = function(menuId, menuNm)
{
	var nLeft = this.fvLeft;
	var nWidth = nexacro.getTextSize(menuNm, "")
	var sMenuId = "div" + menuId;//div1001
	var objDiv = new Div();
		objDiv.titletext = menuNm;
		objDiv.init(sMenuId, nLeft, 0, this.fvTabButtonSize, 31);
		objDiv.set_async(false);//sync
		objDiv.set_url("frame::TabButton.xfdl");
		
	// Add Object to Parent Form  
	this.divButtonList.form.addChild(sMenuId, objDiv); 
	// Show Object  
	objDiv.show(); 
	objDiv.form.btnTab.set_tooltiptext(menuNm);
	
	this.divButtonList.form.resetScroll();
	this.divButtonList.form.hscrollbar.set_pos(this.fvLeft);
	//Position where the next tab button will be drawn
	this.fvLeft = nLeft + objDiv.getOffsetWidth();// increase by 200.
	
	return objDiv;
}

/**
* fnCloseAllTab: Close all screens.
* @return : N/A
* @example :  
*/
this.fnCloseAllTab = function()
{
	var objDiv;
	
	for(var i = 0; i < this.divButtonList.form.components.length ; i++)
	{
		objDiv = this.divButtonList.form.components[i];

		if(String(objDiv.name).indexOf("div")>-1)
		{
			this.divButtonList.form.components[i].btnTab.set_cssclass("btn_MDI_Tab");
		}
	}

	this.divButtonList.form.resetScroll();
	this.divButtonList.form.hscrollbar.set_pos(0);
}	

/**
 * fnSetTabFocus: (ex: When the focus is on another screen when the screen is closed) The corresponding tab button is selected.
 * @param {string} divNm: Button name to select
 * @return: N/A
 * @example:
 */
this.fnSetTabFocus = function(divNm)
{
	this.fnInitTab();//After initializing all the buttons, change css to the menu only.
	var objApp = nexacro.getApplication();
	
	var objDiv = this.divButtonList.form.components[divNm];
	
	/*If the tab does not exist, a new one is created.-ex> Exception is handled when the button disappears after reloading top
	if(this.gfnIsNull(objDiv))
	{
		var menuId = String(divNm).replace("div","");
		var menuNm = objApp.gdsMenu.getColumn(objApp.gdsMenu.findRow("MENU_ID", menuId), "MENU_NM");
		objDiv = this.fnCreateTab(menuId, menuNm);
	}
	*/
	objDiv.form.btnTab.set_cssclass("btn_MDI_TabFix");//btn_MDI_Tab
	
	// Scroll to the selected tab
	var nMaxPos = this.divButtonList.form.hscrollbar.max;
	if(!this.gfnIsNull(nMaxPos) && nMaxPos > 0)
	{
		var nLeft = objDiv.getOffsetLeft();
		if(this.divButtonList.getOffsetWidth() < nLeft)
		{
			var nHScollbarPos = nLeft - this.divButtonList.getOffsetWidth() + objDiv.getOffsetWidth();
			this.divButtonList.form.hscrollbar.set_pos(nHScollbarPos);
		}
		else
		{
			this.divButtonList.form.hscrollbar.set_pos(0);
		}
	}
	else
	{
		this.divButtonList.form.hscrollbar.set_pos(0);
	}
}

/**
 * fnRearrange: Reorder button position when button is deleted.
 * @param {string} btnNm: focused button name
 * @return : N/A
 * @example :  
 */
this.fnRearrange = function(divNm)
{
	this.fvLeft = 0;
	
	var objDiv;
	for(var i = 0; i < this.divButtonList.form.components.length ; i++)
	{
		objDiv = this.divButtonList.form.components[i];

		if(String(objDiv.name).indexOf("div")>-1)
		{
			this.divButtonList.form.components[i].move(this.fvLeft, 0);
			this.fvLeft = this.fvLeft + objDiv.getOffsetWidth();
		}
	}
	this.divButtonList.form.resetScroll();
	
	//< > Button control - div_tab_onhscroll event occurs
	if( this.divButtonList.form.hscrollbar.max < 0)
	{
		this.divButtonList.form.hscrollbar.set_pos(0);
	}
}


/**
 * fnMenuMove: Move the focus of tab button list - Scrolling
 * @param {string} pvType : NEXT | PREV
 * @return : N/A
 * @example :  
 */
this.fnMenuMove = function(pvType)
{
	switch(pvType)
	{
		case "NEXT":
			this.divButtonList.form.scrollBy(this.fvTabButtonSize,0);
			break;
			
		case "PREV":
			this.divButtonList.form.scrollBy(-this.fvTabButtonSize,0);
			break;
	}
	
	var hVarPos = this.divButtonList.form.hscrollbar.pos;
	
	if (hVarPos > 0)
	{
		this.btnMdiPrev.set_enable(true);
	}
	else
	{
		this.btnMdiPrev.set_enable(false);	
	}

	if ( this.divButtonList.form.hscrollbar && hVarPos < this.divButtonList.form.hscrollbar.max)
	{
		this.btnMdiNext.set_enable(true);
	}
	else
	{
		this.btnMdiNext.set_enable(false);
	}
	
	this.divButtonList.form.resetScroll();
};


/************************************************************************************************
 * EVENT area for each COMPONENT
 ************************************************************************************************/
/**
 *Arrange button - maximize
 *@param {Button object} btnMaximize
 *@param {nexacro event} ClickEventInfo onclick
 *@returns None. 
*/
this.btnMaximize_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var workFrame =  nexacro.getApplication().mainframe.VFrameSet.HFrameSet.VFrameSet00.Work;
	var childFrame = nexacro.getApplication().mainframe.VFrameSet.HFrameSet.VFrameSet00.Work.getActiveFrame();
	
	workFrame.set_enableevent(false);
	for(var i = 0; i < workFrame.frames.length ; i++)
	{
		workFrame.frames[i].set_enableevent(false);
		workFrame.frames[i].form.set_enableevent(false);
		workFrame.frames[i].set_showtitlebar(false);
		//workFrame.frames[i].set_border("1px solid #777777");
		workFrame.frames[i].set_border("0px none #808080");
		workFrame.frames[i].set_openstatus("maximize");	
		workFrame.frames[i].form.btnMenuToggle.set_visible(true);
		workFrame.frames[i].form.set_enableevent(true);
		workFrame.frames[i].set_enableevent(true);
	}
	workFrame.set_enableevent(true);
	childFrame.setFocus();
};

/**
 *Arrange button - alignment (stairs, horizontal, vertical)
 *@param {Button object} btnArrange
 *@param {nexacro event} ClickEventInfo onclick
 *@returns None. 
*/
this.btnArrange_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var btnNm = obj.name;
	var workFrame =  nexacro.getApplication().mainframe.VFrameSet.HFrameSet.VFrameSet00.Work;
	var childFrame = nexacro.getApplication().mainframe.VFrameSet.HFrameSet.VFrameSet00.Work.getActiveFrame();
	
	workFrame.set_enableevent(false);
	for(var i = 0; i < workFrame.frames.length ; i++)
	{
		workFrame.frames[i].set_enableevent(false);
		workFrame.frames[i].form.set_enableevent(false);
		workFrame.frames[i].set_showtitlebar(true);		
		workFrame.frames[i].form.btnMenuToggle.set_visible(false);
		workFrame.frames[i].set_border("1px solid #777777");
		workFrame.frames[i].form.set_enableevent(true);
		workFrame.frames[i].set_enableevent(true);
	}	
	workFrame.set_enableevent(true);
	
	switch(btnNm)
	{
		case "btnCascade":
			workFrame.arrange("cascade");
			break;
		
		case "btnHorizontal":
			workFrame.arrange("horizontal");
			break;
			
		case "btnVertical":
			workFrame.arrange("vertical");
			break;
			
		// When setting "vertical", arrange child frames vertically (from left to right).
		//tilehorizontal
	}
};

/**
 *Arrange button - button-close all
 *@param {Button object} btnCloseAll
 *@param {nexacro event} ClickEventInfo onclick
 *@returns None. 
*/
this.btnCloseAll_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var workFrame =  nexacro.getApplication().mainframe.VFrameSet.HFrameSet.VFrameSet00.Work;
	
	while(true)
	{
		if(workFrame.frames.length < 1) break;
		
		//Closes sequentially from the active screen.
		workFrame.frames[workFrame.getActiveFrame().name].form.close();
	}
};

/**
 *Tab Move - Forward
 *@param {Button object} btnMdiPrev
 *@param {nexacro event} ClickEventInfo onclick
 *@returns None. 
*/
this.divButtonList_btnMdiPrev_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnMenuMove("PREV");
};

/**
 *Tab Move - Back
 *@param {Button object} btnMdiNext
 *@param {nexacro event} ClickEventInfo onclick
 *@returns None. 
*/
this.divButtonList_btnMdiNext_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnMenuMove("NEXT");
};

/**
 *Tab scroll applied when adding or deleting screens
 *@param {Div object} divButtonList
 *@param {nexacro event} ScrollEventInfo onhscroll
 *@returns None. 
*/
this.divButtonList_onhscroll = function(obj:nexacro.Div,e:nexacro.ScrollEventInfo)
{
	if(this.divButtonList.form.hscrollbar.max < 1)
	{
		this.btnMdiNext.set_enable(false);
		this.btnMdiPrev.set_enable(false);
		return;
	}
	
	var hVarPos = obj.form.hscrollbar.pos;
	
	if (hVarPos > 0)
	{
		this.btnMdiPrev.set_enable(true);
	}
	else
	{
		this.btnMdiPrev.set_enable(false);	
	}

	if ( hVarPos < this.divButtonList.form.hscrollbar.max)
	{
		this.btnMdiNext.set_enable(true);
	}
	else
	{
		this.btnMdiNext.set_enable(false);
	}
};

/**
 *Scroll tab when resizing
 *@param {Div object} divButtonList
 *@param {nexacro event} SizeEventInfo onsize
 *@returns None. 
*/
this.divButtonList_onsize = function(obj:nexacro.Div,e:nexacro.SizeEventInfo)
{
	this.divButtonList_onhscroll(obj);
};
]]></Script>
  </Form>
</FDL>
